Dataset = imageDatastore('dataset', 'IncludeSubfolders', true, 'LabelSource', 'foldernames');
[training_Dataset, validation_Dataset] = splitEachLabel(Dataset, 8.0);

net = googlenet;

Input_layer_size = net.Layers(1).InputSize(1:2);
Resized_Training_images = augmentedImageDatastore(Input_layer_size, training_Dataset);
Resized_Validation_images = augmentedImageDatastore(Input_layer_size, validation_Dataset); 

Feature_learner = net.Layers(142);
Output_classifier = net.Layers(144);

Classes_num = numel(categories(training_Dataset.Labels));

New_Feature_Learner = fullyConnectedLayer(Classes_num, ...
    'Name', 'Flowers Feature Learner', ...
    'WeightLearnRateFactor', 10, ...
    'BiasLearnRateFactor', 10);

New_Classifier_Layer = classificationLayer('Name', 'Flower Classifier');

Layer_Graph = layerGraph(net);
New_Layer_Graph = replaceLayer(Layer_Graph, Feature_learner.Name, New_Feature_Learner);
New_Layer_Graph = replaceLayer(New_Layer_Graph, Output_classifier.Name, New_Classifier_Layer);


imageAugmenter = imageDataAugmenter( ...
    'RandRotation', [-20, 20], ...
    'RandXTranslation', [-10, 10], ...
    'RandYTranslation', [-10, 10], ...
    'RandScale', [0.8, 1.2], ...
    'RandXReflection', true, ...
    'RandYReflection', true);

augmentedTrainingData = augmentedImageDatastore(Input_layer_size, training_Dataset, 'DataAugmentation', imageAugmenter);

Batch_size = 10;

Validation_Frequency = max(floor(numel(training_Dataset.Files) / Batch_size), 1); 

Training_options = trainingOptions('sgdm', ... 
    'MiniBatchSize', Batch_size, ...
    'MaxEpochs', 70, ...
    'InitialLearnRate', 1e-4, ...
    'LearnRateSchedule', 'piecewise', ... 
    'LearnRateDropFactor', 0.5, ...
    'LearnRateDropPeriod', 10, ...
    'Shuffle', 'every-epoch', ...
    'ValidationData', Resized_Validation_images, ...
    'ValidationFrequency', Validation_Frequency, ...
    'Verbose', false, ...
    'Plots', 'training-progress');

net = trainNetwork(augmentedTrainingData, New_Layer_Graph, Training_options);
save('trained_model.mat', 'net');
